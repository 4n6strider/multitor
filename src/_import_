#!/usr/bin/env bash

################################################################################
######################## Definitions of user variables #########################
################################################################################

export _cmdtime_state=0


################################################################################
######################## Definitions of user functions #########################
################################################################################

# ``````````````````````````````````````````````````````````````````````````````
# Function name: DestroyTorProcess()
#
# Description:
#   It destroys currently running tor process.
#
# Usage:
#   DestroyTorProcess "id"
#
# Examples:
#   DestroyTorProcess ${_tpr}"
#

function DestroyTorProcess() {

  local _FUNCTION_ID="DestroyTorProcess"
  local _STATE=0

  local _arg_tproc="$1"

  local _arg_tdir=$(ps -p $_arg_tproc -u | grep "tor" | awk '{print $25}')

  kill -9 $_arg_tproc > /dev/null 2>&1 ; _kstate="$?"

  if [[ $_kstate -eq 0 ]] ; then

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "killed tor process: '${_arg_tproc}'"

      # Init DestroyTorDirectory to removed tor process data directory.
      DestroyTorDirectory

  else

    _logger "warn" \
      "${_FUNCTION_ID}()" \
      "not killed tor process (maybe not found?)"

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: DestroyTorDirectory()
#
# Description:
#   It destroys currently tor processes data directory.
#
# Usage:
#   DestroyTorDirectory
#
# Examples:
#   DestroyTorDirectory
#

function DestroyTorDirectory() {

  local _FUNCTION_ID="DestroyTorDirectory"
  local _STATE=0

  if [[ -d "$_arg_tdir" ]] ; then

    rm -fr "$_arg_tdir" && \
    _logger "info" \
      "${_FUNCTION_ID}()" \
      "removed tor process directory: '${_arg_tdir}'"

  else

    _logger "warn" \
      "${_FUNCTION_ID}()" \
      "not found tor process directory"

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: CreateTorProcess()
#
# Description:
#   It creates tor processes.
#
# Usage:
#   CreateTorProcess "username" "num" "num"
#
# Examples:
#   CreateTorProcess ${user_name} ${socks_port_number} ${control_port_number}
#

function CreateTorProcess() {

  local _FUNCTION_ID="CreateTorProcess"
  local _STATE=0

  local _arg_uname="$1"
  local _arg_socks="$2"
  local _arg_control="$3"

  local _proc_dir="${_multitor_directory}/${_arg_socks}"
  local _torrc_config="${_proc_dir}/torrc"

  # We create a directory for the new tor process.
  CreateTorDirectory

  # We save the hash of the password to the configuration file.
  echo "HashedControlPassword ${_pass_hash}" > "${_torrc_config}" && \
  _logger "info" \
    "${_FUNCTION_ID}()" \
    "saved HashedControlPassword correctly" ||
  _logger "stop" \
    "${_FUNCTION_ID}()" \
    "not saved HashedControlPassword correctly"

  chmod 0400 "${_torrc_config}" && \
  chown "${_arg_uname}:${_arg_uname}" "${_torrc_config}" && \
    _logger "info" \
    "${_FUNCTION_ID}()" \
    "change permission and owner correctly" ||
  _logger "stop" \
    "${_FUNCTION_ID}()" \
    "not changed permission and owner correctly"

  sudo -u $_arg_uname tor -f "${_torrc_config}" \
      --RunAsDaemon 1 \
      --CookieAuthentication 0 \
      --SocksPort $_arg_socks \
      --ControlPort $_arg_control \
      --PidFile "$_arg_socks.pid" \
      --DataDirectory "${_proc_dir}" \
      > "$_log_stdout" 2>&1 ; _kstate="$?"

  if [[ $_kstate -eq 0 ]] ; then

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "create process: '${_arg_socks.pid}'"

  else

    _logger "warn" \
      "${_FUNCTION_ID}()" \
      "no process was created"

  fi

  unset _kstate

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: CreateTorDirectory()
#
# Description:
#   It creates tor processes data directory.
#
# Usage:
#   CreateTorDirectory
#
# Examples:
#   CreateTorDirectory
#

function CreateTorDirectory() {

  local _FUNCTION_ID="CreateTorDirectory"
  local _STATE=0

  mkdir -m 0700 "$_proc_dir" > /dev/null 2>&1 ; _kstate="$?"

  if [[ $_kstate -eq 0 ]] ; then

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "created tor process directory: ${_proc_dir}"

    chown "${_arg_uname}" "${_proc_dir}" && \
    _logger "info" \
      "${_FUNCTION_ID}()" \
      "changed owner properly to: '${_arg_uname}'" || \
    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "the owner could not be changed"

  else

    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "not created tor process directory"

  fi

  unset _kstate

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: OutputGen()
#
# Description:
#   Show multitor output.
#
# Usage:
#   OutputGen
#
# Examples:
#   OutputGen
#

function OutputGen() {

  local _FUNCTION_ID="OutputGen"
  local _STATE=0

  _tor_proc_id=$(echo "$_arg_tdir" | awk '{print $1}')
  _tor_proc_config=$(echo "$_arg_tdir" | awk '{print $7}')
  _tor_proc_socks=$(echo "$_arg_tdir" | awk '{print $13}')
  _tor_proc_control=$(echo "$_arg_tdir" | awk '{print $15}')
  _tor_prod_data_dir=$(echo "$_arg_tdir" | awk '{print $19}')

  printf "         \e[1;32mpid\e[m: \e[1;39m%s\e[m\n" "$_tor_proc_id"
  printf "  \e[1;32msocks_port\e[m: \e[0;33m%d\e[m\n" "$_tor_proc_socks"
  printf "\e[1;32mcontrol_port\e[m: \e[0;33m%d\e[m\n" "$_tor_proc_control"
  printf "    \e[1;32mdata_dir\e[m: \e[0;30m%s\e[m\n" "$_tor_prod_data_dir"
  printf "      \e[1;32mconfig\e[m: \e[0;30m%s\e[m\n" "$_tor_proc_config"

  return $_STATE

}
